r <- r2
}
library(Matrix) # to generate a Hilbert matrix
n <- 5 #n can be 5, 8, 12, 20
A <- Hilbert(n)
b <- rep(1, n)
x <- matrix(rep(0,n))
r <- A %*%x - b
p <- -r
k <- 0
while ( norm(r) > 0){
alpha <- t(r)%*%r/(t(p)%*%A%*%p)
x <- x +(p) %*% alpha
r2 <- r - (A%*%p)%*% alpha
beta <- norm(r2)/(norm(r))
k=k+1
print(paste('Iter',k,':'))
print(r2)
r <- r2
}
n <- 5 #n can be 5, 8, 12, 20
A <- Hilbert(n)
b <- rep(1, n)
x <- matrix(rep(0,n))
r <- A %*%x - b
p <- -r
k <- 0
alpha <- norm(r)/(t(p)%*%A%*%p)
x <- x +(p) %*% alpha
r2 <- r - (A%*%p)%*% alpha
beta <- norm(r2)/(norm(r))
k=k+1
print(paste('Iter',k,':'))
print(r2)
r <- r2
r
while ( norm(r) > 0){
alpha <- norm(r)/(t(p)%*%A%*%p)
x <- x +(p) %*% alpha
r2 <- r - (A%*%p)%*% alpha
beta <- norm(r2)/(norm(r))
k=k+1
print(paste('Iter',k,':'))
print(r2)
r <- r2
}
x <- matrix(rep(0,n))
r <- A %*%x - b
p <- -r
k <- 0
while ( norm(r) > 0){
alpha <- norm(r)/(t(p)%*%A%*%p)
x <- x +(p) %*% alpha
r2 <- r + (A%*%p)%*% alpha
beta <- norm(r2)/(norm(r))
k=k+1
print(paste('Iter',k,':'))
print(r2)
r <- r2
}
write.csv(fin.mat2, 'final.time.table.csv')
require(data.table)
require(ggplot2)
require(parallel)
sim100 = fread('~/Dropbox/Samir/SMART_VIS/results/time_100_features_numSamples100.csv')
sim10 = fread('~/Dropbox/Samir/SMART_VIS/results/time_10_features_numSamples100.csv')
sim1000 = fread('~/Dropbox/Samir/SMART_VIS/results/time_1000_features_numSamples100.csv')
removeOutliers <- function(sim10){
new.mat = data.frame()
for(model in unique(sim10$Model)){
model.mat = sim10[sim10$Model==model][order(sim10[Model == model]$elapsed)][1:90]
new.mat = rbind(new.mat,model.mat )
}
return(new.mat)
}
sim10 = removeOutliers(sim10)
sim100 = removeOutliers(sim100)
sim1000 = removeOutliers(sim1000)
generate_boxplots <- function(sim100, numFeatures=100){
sim100 = sim100[!sim100$Model %in% c('randomForest', 'RF_Soil')]
sim100$Model[sim100$Model=='LASSO'] <- 'Oracle'
ggplot(sim100 ) + geom_boxplot(aes(x=reorder(Model, elapsed, FUN=median), y=elapsed))  +
theme_dark()+ labs(title=paste('Avg. Runtime:', numFeatures, 'features'), x='',y='Time (seconds)')+
theme(
plot.title = element_text(color="black", size=16, face="bold.italic"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.text.x = element_text(color="black", size=14, face="bold", angle = 90))+
ylim(c(0, max(sim100$elapsed)['90%']))
}
m1 = generate_boxplots(sim10, numFeatures = 10)
m2 = generate_boxplots(sim100, numFeatures = 100)
m3 = generate_boxplots(sim1000, numFeatures = 1000)
require(ggpubr)
pdf('~/Dropbox/Samir/SMART_VIS/plots/sim_1_time.profile.pdf', width = 11, height = 6)
figure= ggarrange(m1,m2,m3,
ncol=3, nrow=1)
annotate_figure(figure,
top = text_grob("Computation Time Across Methods",
color = "black", face = "bold", size = 24),
bottom = text_grob("", color = "blue",
hjust = 1, x = 1, face = "italic", size = 10),
left = text_grob("", color = "green", rot = 90),
right = "",
fig.lab = "", fig.lab.face = "bold"
)
dev.off()
X= sim10[, list(Avg.Time = mean(elapsed), Std.Dev =sd(elapsed)), by=Model]
X2=sim100[, list(Avg.Time = mean(elapsed), Std.Dev =sd(elapsed)), by=Model]
X3=sim1000[, list(Avg.Time = mean(elapsed), Std.Dev =sd(elapsed)), by=Model]
fin.mat = cbind(X,X2[,2:3], X3[, 2:3])
colnames(fin.mat) <- c('Model', 'Avg.Time (X10)', 'Std.Dev (X10)', 'Avg.Time (X100)','Std.Dev (X100)', 'Avg.Time (X1000)','Std.Dev (X1000)')
fin.mat[, 2:7] <- round(fin.mat[,2:7],2)
fin.mat2 = data.frame(cbind(
paste(fin.mat$`Avg.Time (X10)`,' (', fin.mat$`Std.Dev (X10)`, ')', sep = ''),
paste(fin.mat$`Avg.Time (X100)`,' (', fin.mat$`Std.Dev (X100)`, ')', sep = ''),
paste(fin.mat$`Avg.Time (X1000)`,' (', fin.mat$`Std.Dev (X1000)`, ')', sep = '')),
row.names = fin.mat$Model); colnames(fin.mat2) <- c('10 features','100 features','1000 features')
fin.mat2 = fin.mat2[order(fin.mat$`Avg.Time (X10)`),]
write.csv(fin.mat2, '~/Dropbox/Samir/SMART_VIS/results/final.time.table.csv')
fin.mat2
set.seed(10)
require(parallel)
source('simulateData.R')
source('helper_functions.R')
source('variableModelFunctions.R')
require(data.table)
require(Boruta)
require(VSURF)
require(vita)
require(perm)
require(randomForest)
require(compiler)
require(varSelRF)
require(devtools)
ntrees = 500
percent_features = .4
percent_data=.5
pval_thresh = .05
dim.X = 100
trainModels.time <- function(ntrees=20, percent_features=.4, fdr.method='BY', pval_thresh =.05, dim.X = 10, numSamples=100){
require(data.table)
require(Boruta)
require(VSURF)
require(vita)
require(perm)
require(randomForest)
require(compiler)
require(varSelRF)
require(glmnet)
require(devtools)
load_all("~/Dropbox/Samir/SMART_VIS/SMART_VIS/SMARTVIS")
X = matrix(rnorm(numSamples*dim.X),ncol=dim.X)
z = X%*% c(rep(1,5), rep(0,dim.X-5))
y = factor(rbinom(numSamples, size=1, prob= 1/(1+exp(-z))))
X = data.frame(X)
numVars = ncol(X)
rf.breiman.time <- system.time(rf.object <- randomForest(X, y, keep.forest = T, keep.inbag = T, ntree = ntrees))
binom.rf.time = system.time(binom.rf <- SMARTVIS::binomialRF(X,y, fdr.method = fdr.method, ntrees=ntrees, percent_features = .4))
lasso.time <- system.time(lasso <- cv.glmnet(as.matrix(X), y=y, alpha=1, family="binomial"))
rf.soil.time <- system.time(RFSoil <- try(RF_Soil(data.frame(X), as.numeric(y)-1, data.frame(test.X),test.y, ntrees)))
vsurf.time <- system.time(vsurf.object <- VSURF(X, y, parallel = T))
boruta.time <- system.time(boruta.object <-  Boruta(X, y, verbose=1))
pimp.time <- system.time(pimp.test <- data.frame(PimpTest(PIMP(X,y, rf.object, S=100, parallel = T, ncores=4), para=T)$p.ks.test, stringsAsFactors = F))
varselrf.time <- system.time(varselrf.object <- varSelRF(xdata = X, Class = y))
TimeTracking = data.frame(rbind(
binom.rf.time,
boruta.time,
vsurf.time,
varselrf.time,
pimp.time,
lasso.time))
TimeTracking$Model = c('BinomialRF','Boruta','VSURF','VarSelRF','PIMP','Oracle')
return(TimeTracking)
}
fdr.method ='BY'
args <- commandArgs(TRUE)
ntrees = 100
nsim   = 100
dim.X =10
numSamples = 100
require(doSNOW)
cl<-makeCluster(detectCores(), type = 'SOCK' ) # I have two cores
registerDoSNOW(cl)
modelList = foreach(j=1:nsim,
.packages=c('data.table','compiler','parallel')) %dopar%
try(trainModels.time(ntrees = ntrees, fdr.method = fdr.method, dim.X = dim.X, numSamples = numSamples))
setwd("~/Dropbox/Samir/SMART_VIS/code")
set.seed(10)
require(parallel)
source('simulateData.R')
source('helper_functions.R')
source('variableModelFunctions.R')
require(data.table)
require(Boruta)
require(VSURF)
require(vita)
require(perm)
require(randomForest)
require(compiler)
require(varSelRF)
require(devtools)
ntrees = 500
percent_features = .4
percent_data=.5
pval_thresh = .05
dim.X = 100
trainModels.time <- function(ntrees=20, percent_features=.4, fdr.method='BY', pval_thresh =.05, dim.X = 10, numSamples=100){
require(data.table)
require(Boruta)
require(VSURF)
require(vita)
require(perm)
require(randomForest)
require(compiler)
require(varSelRF)
require(glmnet)
require(devtools)
load_all("~/Dropbox/Samir/SMART_VIS/SMART_VIS/SMARTVIS")
X = matrix(rnorm(numSamples*dim.X),ncol=dim.X)
z = X%*% c(rep(1,5), rep(0,dim.X-5))
y = factor(rbinom(numSamples, size=1, prob= 1/(1+exp(-z))))
X = data.frame(X)
numVars = ncol(X)
rf.breiman.time <- system.time(rf.object <- randomForest(X, y, keep.forest = T, keep.inbag = T, ntree = ntrees))
binom.rf.time = system.time(binom.rf <- SMARTVIS::binomialRF(X,y, fdr.method = fdr.method, ntrees=ntrees, percent_features = .4))
lasso.time <- system.time(lasso <- cv.glmnet(as.matrix(X), y=y, alpha=1, family="binomial"))
rf.soil.time <- system.time(RFSoil <- try(RF_Soil(data.frame(X), as.numeric(y)-1, data.frame(test.X),test.y, ntrees)))
vsurf.time <- system.time(vsurf.object <- VSURF(X, y, parallel = T))
boruta.time <- system.time(boruta.object <-  Boruta(X, y, verbose=1))
pimp.time <- system.time(pimp.test <- data.frame(PimpTest(PIMP(X,y, rf.object, S=100, parallel = T, ncores=4), para=T)$p.ks.test, stringsAsFactors = F))
varselrf.time <- system.time(varselrf.object <- varSelRF(xdata = X, Class = y))
TimeTracking = data.frame(rbind(
binom.rf.time,
boruta.time,
vsurf.time,
varselrf.time,
pimp.time,
lasso.time))
TimeTracking$Model = c('BinomialRF','Boruta','VSURF','VarSelRF','PIMP','Oracle')
return(TimeTracking)
}
fdr.method ='BY'
args <- commandArgs(TRUE)
ntrees = 100
nsim   = 100
dim.X =10
numSamples = 100
require(doSNOW)
cl<-makeCluster(detectCores(), type = 'SOCK' ) # I have two cores
registerDoSNOW(cl)
modelList = foreach(j=1:nsim,
.packages=c('data.table','compiler','parallel')) %dopar%
try(trainModels.time(ntrees = ntrees, fdr.method = fdr.method, dim.X = dim.X, numSamples = numSamples))
stopCluster(cl)
mod = do.call(rbind, modelList)
write.csv(mod,file=paste('../results/time_', dim.X,'_features','_numSamples',numSamples,'.csv', sep=''))
modelList
sim10 = fread('~/Dropbox/Samir/SMART_VIS/results/time_10_features_numSamples100.csv')
removeOutliers <- function(sim10){
new.mat = data.frame()
for(model in unique(sim10$Model)){
model.mat = sim10[sim10$Model==model][order(sim10[Model == model]$elapsed)][1:90]
new.mat = rbind(new.mat,model.mat )
}
return(new.mat)
}
sim10 = removeOutliers(sim10)
generate_boxplots <- function(sim100, numFeatures=100){
sim100 = sim100[!sim100$Model %in% c('randomForest', 'RF_Soil')]
sim100$Model[sim100$Model=='LASSO'] <- 'Oracle'
ggplot(sim100 ) + geom_boxplot(aes(x=reorder(Model, elapsed, FUN=median), y=elapsed))  +
theme_dark()+ labs(title=paste('Avg. Runtime:', numFeatures, 'features'), x='',y='Time (seconds)')+
theme(
plot.title = element_text(color="black", size=16, face="bold.italic"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.text.x = element_text(color="black", size=14, face="bold", angle = 90))+
ylim(c(0, max(sim100$elapsed)['90%']))
}
generate_boxplots(sim10, numFeatures = 10)
source('~/Dropbox/Samir/SMART_VIS/code/time.profile.SMARTVIS.R', echo=TRUE)
modelList
sim100 = fread('~/Dropbox/Samir/SMART_VIS/results/time_100_features_numSamples100.csv')
sim10 = fread('~/Dropbox/Samir/SMART_VIS/results/time_10_features_numSamples100.csv')
removeOutliers <- function(sim10){
new.mat = data.frame()
for(model in unique(sim10$Model)){
model.mat = sim10[sim10$Model==model][order(sim10[Model == model]$elapsed)][1:90]
new.mat = rbind(new.mat,model.mat )
}
return(new.mat)
}
sim10 = removeOutliers(sim10)
sim100 = removeOutliers(sim100)
generate_boxplots <- function(sim100, numFeatures=100){
sim100 = sim100[!sim100$Model %in% c('randomForest', 'RF_Soil')]
sim100$Model[sim100$Model=='LASSO'] <- 'Oracle'
ggplot(sim100 ) + geom_boxplot(aes(x=reorder(Model, elapsed, FUN=median), y=elapsed))  +
theme_dark()+ labs(title=paste('Avg. Runtime:', numFeatures, 'features'), x='',y='Time (seconds)')+
theme(
plot.title = element_text(color="black", size=16, face="bold.italic"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.text.x = element_text(color="black", size=14, face="bold", angle = 90))+
ylim(c(0, max(sim100$elapsed)['90%']))
}
generate_boxplots(sim10, numFeatures = 10)
generate_boxplots(sim100, numFeatures = 100)
dim.X =1000
numSamples = 100
require(doSNOW)
cl<-makeCluster(detectCores(), type = 'SOCK' ) # I have two cores
registerDoSNOW(cl)
modelList = foreach(j=1:nsim,
.packages=c('data.table','compiler','parallel')) %dopar%
try(trainModels.time(ntrees = ntrees, fdr.method = fdr.method, dim.X = dim.X, numSamples = numSamples))
stopCluster(cl)
mod = do.call(rbind, modelList)
write.csv(mod,file=paste('../results/time_', dim.X,'_features','_numSamples',numSamples,'.csv', sep=''))
modelList
session_info()
require(parallel)
source('simulateData.R')
source('helper_functions.R')
source('variableModelFunctions.R')
require(data.table)
require(Boruta)
require(VSURF)
require(vita)
require(perm)
require(randomForest)
require(compiler)
require(varSelRF)
require(devtools)
ntrees = 500
percent_features = .4
percent_data=.5
pval_thresh = .05
dim.X = 100
randomForest
fdr.method ='BY'
args <- commandArgs(TRUE)
ntrees = 100
nsim   = 100
dim.X =1000
numSamples = 100
require(doSNOW)
cl<-makeCluster(detectCores(), type = 'SOCK' ) # I have two cores
registerDoSNOW(cl)
modelList = foreach(j=1:nsim,
.packages=c('data.table','compiler','parallel')) %dopar%
try(trainModels.time(ntrees = ntrees, fdr.method = fdr.method, dim.X = dim.X, numSamples = numSamples))
stopCluster(cl)
mod = do.call(rbind, modelList)
write.csv(mod,file=paste('../results/time_', dim.X,'_features','_numSamples',numSamples,'.csv', sep=''))
install.packages(c('randomForest','data.table','Boruta','vita','perm','compiler','varSelRF','devtools','VSURF'))
install.packages(c("randomForest", "data.table", "Boruta", "vita", "perm", "compiler", "varSelRF", "devtools", "VSURF"))
install.packages(c("randomForest", "data.table", "Boruta", "vita", "perm", "compiler", "varSelRF", "devtools", "VSURF"))
install.packages(c("randomForest", "data.table", "Boruta", "vita", "perm", "compiler", "varSelRF", "devtools", "VSURF"))
source('~/Dropbox/Samir/SMART_VIS/code/time.profile.SMARTVIS.R', echo=TRUE)
install.packages('doSnow')
install.packages('doSNOW')
source('~/Dropbox/Samir/SMART_VIS/code/time.profile.SMARTVIS.R', echo=TRUE)
install.packages('magic')
source('~/Dropbox/Samir/SMART_VIS/code/time.profile.SMARTVIS.R', echo=TRUE)
modelList
require(data.table)
require(ggplot2)
require(parallel)
sim100 = fread('~/Dropbox/Samir/SMART_VIS/results/time_100_features_numSamples100.csv')
sim10 = fread('~/Dropbox/Samir/SMART_VIS/results/time_10_features_numSamples100.csv')
sim1000 = fread('~/Dropbox/Samir/SMART_VIS/results/time_1000_features_numSamples100.csv')
removeOutliers <- function(sim10){
new.mat = data.frame()
for(model in unique(sim10$Model)){
model.mat = sim10[sim10$Model==model][order(sim10[Model == model]$elapsed)][1:90]
new.mat = rbind(new.mat,model.mat )
}
return(new.mat)
}
sim10 = removeOutliers(sim10)
sim100 = removeOutliers(sim100)
sim1000 = removeOutliers(sim1000)
generate_boxplots <- function(sim100, numFeatures=100){
sim100 = sim100[!sim100$Model %in% c('randomForest', 'RF_Soil')]
sim100$Model[sim100$Model=='LASSO'] <- 'Oracle'
ggplot(sim100 ) + geom_boxplot(aes(x=reorder(Model, elapsed, FUN=median), y=elapsed))  +
theme_dark()+ labs(title=paste('Avg. Runtime:', numFeatures, 'features'), x='',y='Time (seconds)')+
theme(
plot.title = element_text(color="black", size=16, face="bold.italic"),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold"),
axis.text.x = element_text(color="black", size=14, face="bold", angle = 90))+
ylim(c(0, max(sim100$elapsed)['90%']))
}
m1 = generate_boxplots(sim10, numFeatures = 10)
m2 = generate_boxplots(sim100, numFeatures = 100)
m3 = generate_boxplots(sim1000, numFeatures = 1000)
require(ggpubr)
figure= ggarrange(m1,m2,m3,
ncol=3, nrow=1)
require(ggpubr)
install.packages('ggarrange')
install.packages('ggpubr')
require(ggpubr)
generate_boxplots(sim1000, numFeatures = 1000)
figure= ggarrange(m1,m2,m3,
ncol=3, nrow=1)
annotate_figure(figure,
top = text_grob("Computation Time Across Methods",
color = "black", face = "bold", size = 24),
bottom = text_grob("", color = "blue",
hjust = 1, x = 1, face = "italic", size = 10),
left = text_grob("", color = "green", rot = 90),
right = "",
fig.lab = "", fig.lab.face = "bold"
)
figure= ggarrange(m1,m2,m3,
ncol=3, nrow=1)
annotate_figure(figure,
top = text_grob("Computation Time Across Methods",
color = "black", face = "bold", size = 24),
bottom = text_grob("", color = "blue",
hjust = 1, x = 1, face = "italic", size = 10),
left = text_grob("", color = "green", rot = 90),
right = "",
fig.lab = "", fig.lab.face = "bold"
)
figure= ggarrange(m1,m2,m3,
ncol=3, nrow=1)
annotate_figure(figure,
top = text_grob("Computation Time Across Methods",
color = "black", face = "bold", size = 24),
bottom = text_grob("", color = "blue",
hjust = 1, x = 1, face = "italic", size = 10),
left = text_grob("", color = "green", rot = 90),
right = "",
fig.lab = "", fig.lab.face = "bold"
)
args <- commandArgs(TRUE)
ntrees = 100
nsim   = 100
dim.X =10000
numSamples = 100
require(doSNOW)
cl<-makeCluster(detectCores(), type = 'SOCK' ) # I have two cores
registerDoSNOW(cl)
modelList = foreach(j=1:nsim,
.packages=c('data.table','compiler','parallel')) %dopar%
try(trainModels.time(ntrees = ntrees, fdr.method = fdr.method, dim.X = dim.X, numSamples = numSamples))
rm(modelList)
require(AUCRF)
rfNews()
source('~/Desktop/generate_fakeData..R')
ls()
X
y
AUCRF(X~y)
data(exampleData)
str(exampleData
)
AUCRF(y~., data=cbind(X,y))
?AUCrF
?AUCRF
newData = cbind(X,y)
str(newData)
colnames(newData) <- c(paste("X", 1:10), 'y)
)
')
colnames(newData) <- c(paste("X", 1:10), 'y')
str(newData)
newData <- as.data.frame(newData)
str(newData)
AUCRF(y~., data=newData)
newData$y <- as.factor(newData$y)
str(newData)
AUCRF(y~., data=newData)
colnames(newData) <- c(paste('X', 1:10, sep=''),'y')
head(newData)
AUCRF(y~., data=newData)
AUCRFcv(x, nCV = 5, M = 20)
x <- AUCRF(y~., data=newData)
x
str(x
)
x
x$ranking
x$Xopt
AUCRF(y~., data=newData)
dimX=10
str(newData
)
X
X = data.frame(X
)
str(X)
dir()
source('test.R')
source('test.R')
